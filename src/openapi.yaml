openapi: 3.0.0
info:
  title: Problems Service
  version: 1.0.0
  description: The Problems Service is responsible for managing dsa and api problems.
    DSA Problem Management - Create and manage traditional data structures and algorithms problems with test cases and constraints.
    API Problem Management - Create API challenges with input/output contracts, expected implementations, and evaluation criteria.
    Category and Difficulty Tagging - Classify problems based on difficulty levels, types, and categories for better discoverability.

servers:
  - url: /problems-svc/api/v1.0
    description: Local development server

components:
  parameters:
    TypeIdParam:
      name: typeId
      description: The ID of problem type to verify
      in: path
      required: true
      schema:
        type: string
        pattern: '^[A-F0-9]{8}:[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{11}'

    TagIdParam:
      name: tagId
      description: The ID of tag to verify
      in: path
      required: true
      schema:
        type: string
        pattern: '^[A-F0-9]{8}:[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{11}'

    LangIdParam:
      name: langId
      description: The ID of lang to verify
      in: path
      required: true
      schema:
        type: string
        pattern: '^[A-F0-9]{8}:[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{11}'

  schemas:
    registerProblemTypePayload:
      type: object
      properties:
        typeCode:
          type: string
          description: Type Code
          minLength: 1
        typeDesc:
          type: string
          description: Type Description
          minLength: 1
        executor:
          type: string
          description: Executor
      required:
        - typeCode
        - typeDesc
        - executor

    updateProblemTypePayload:
      type: object
      properties:
        typeDesc:
          type: string
          description: Type Description
          minLength: 1
        executor:
          type: string
          description: Executor
          minLength: 1
      required:
        - typeDesc

    registerTagPayload:
      type: object
      properties:
        tagCode:
          type: string
          description: Tag Code
          minLength: 1
        tagDesc:
          type: string
          description:  Tag Description
          minLength: 1
      required:
        - tagCode
        - tagDesc

    updateTagPayload:
      type: object
      properties:
        tagDesc:
          type: string
          description: Tag Description
          minLength: 1
      required:
        - tagDesc

    registerLanguagePayload:
      type: object
      properties:
        typeId:
          type: string
          description: Type ID
          minLength: 30
        langCode:
          type: string
          description: Language Code
          minLength: 1
        language:
          type: string
          description: Language Detail
          minLength: 1
        metadata:
          type: string
      required:
        - typeId
        - langCode
        - language
        - metadata

    updateLanguagePayload:
      type: object
      properties:
        typeId:
          type: string
          description: Type ID
          minLength: 30
        language:
          type: string
          description: Language Detail
          minLength: 1
        metadata:
          type: string

    registerProblemPayload:
      type: object
      properties:
        typeId:
          type: string
          description: Type ID
          minLength: 30
        title:
          type: string
          description: Title
          minLength: 1
        description:
          type: string
          description: Problem Description
          minLength: 1
        difficulty:
          type: string
          minLength: 1
          enum:
            - Easy
            - Medium
            - Hard
        tags:
          type: array
          minItems: 1
          items:
            type: string
        examples:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/problemExampleData'
        constraints:
          type: array
          minItems: 1
          items:
            type: string
        hints:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/problemHintsData'
        testCases:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/testCasesData'
        codeSnippets:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/codeSnippetsData'
        referenceSolutions:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/referenceSolutionsData'
      required:
        - typeId
        - title
        - description
        - difficulty
        - tags
        - examples
        - constraints
        - hints
        - testCases
        - codeSnippets
        - referenceSolutions

    problemExampleData:
      title: Schema for Problem Example Data
      type: object
      properties:
        id:
          type: string
        input:
          type: string
          minLength: 1
        output:
          type: string
          minLength: 1
        explanation:
          type: string
          minLength: 1
      required:
        - input
        - output
        - explanation

    problemHintsData:
      title: Schema for Problem Hints Data
      type: object
      properties:
        id:
          type: string
        orderNo:
          type: integer
        hint:
          type: string
          minLength: 1
      required:
        - orderNo
        - hint

    testCasesData:
      title: Schema for Problem Test Cases
      type: object
      properties:
        input:
          type: string
          minLength: 1
        output:
          type: string
          minLength: 1
        isPublic:
          type: boolean
      required:
        - input
        - output
        - isPublic

    codeSnippetsData:
      title: Schema for Problem Code Snippets
      type: object
      properties:
        id:
          type: string
        languageId:
          type: string
          minLength: 30
        snippet:
          type: string
          minLength: 1
      required:
         - languageId
         - snippet

    referenceSolutionsData:
      title: Schema for Problem Reference Solutions
      type: object
      properties:
        languageId:
          type: string
          minLength: 30
        solution:
          type: string
          minLength: 1
      required:
        - languageId
        - solution

    problemTagsData:
      title: Schema for Problem Tags
      type: object
      properties:
        id:
          type: string
        tag:
          type: string
      required:
        - id
        - tag

    problemTestCasesData:
      title: Schema for Problem Test Cases
      type: object
      properties:
        id:
          type: string
        input:
          type: string
        output:
          type: string
      required:
        - id
        - input
        - output

    healthCheckData:
      title: Schema for Health Check Data
      type: object
      properties:
        uptime:
          type: string
        timestamp:
          type: string
        hostname:
          type: string

    getProblemTypeResponseData:
      title: Schema for Get Problem Type Response Data
      type: object
      properties:
        id:
          type: string
        typeCode:
          type: string
          example: Type Code
        typeDesc:
          type: string
          example: Type Description
        executor:
          type: string
          example: Executor
        core:
          type: boolean
          example: false
        createdDate:
          type: string
        modifiedDate:
          type: string
      required:
        - id
        - typeCode
        - typeDesc

    getTagResponseData:
      title: Schema for retireving Tag data
      type: object
      properties:
        id:
          type: string
        tagCode:
          type: string
          example: Tag Code
        tagDesc:
          type: string
          example: Tag Description
        core:
          type: boolean
          example: Core
        createdDate:
          type: string
        modifiedDate:
          type: string
      required:
        - id
        - tagCode
        - tagDesc

    getLanguageResponseData:
      title: Schema for retrieving Language Details
      type: object
      properties:
        id:
          type: string
        typeId:
          type: string
        langCode:
          type: string
        language:
          type: string
        metadata:
          type: string
          nullable: true
        typeCode:
          type: string
      required:
        - id
        - langCode
        - language

    getProblemResponseData:
      title: Schema for retrieving Problem Details
      type: object
      properties:
        id:
          type: string
        problemCode:
          type: integer
        title:
          type: string
        description:
          type: string
        difficulty:
          type: string
        constraints:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/problemTagsData'
        examples:
          type: array
          items:
            $ref: '#/components/schemas/problemExampleData'
        hints:
          type: array
          items:
            $ref: '#/components/schemas/problemHintsData'
        testCases:
          type: array
          items:
            $ref: '#/components/schemas/problemTestCasesData'
        codeSnippet:
          type: array
          items:
            $ref: '#/components/schemas/codeSnippetsData'
      required:
        - id
        - problemCode
        - title
        - description
        - difficulty
        - constraints
        - tags
        - examples
        - hints
        - testCases
        - codeSnippet

    healthCheckSuccessResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          $ref: '#/components/schemas/healthCheckData'

    registerProblemTypeResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        type:
          type: string
          example: 'REQUEST_COMPLETED'
        message:
          type: string
          example: 'Request Completed'
        devMessage:
          type: string
          example: 'Request Completed'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/getProblemTypeResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    getAllProblemTypeResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/getProblemTypeResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    getProblemTypeByIdResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/getProblemTypeResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    registerTagResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/getTagResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    getAllTagsResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/getTagResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    getTagsByIdResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/getTagResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    registerLanguageResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/getLanguageResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    getAllLanguagesResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: array
          items:
            $ref: '#/components/schemas/getLanguageResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    getLangByIdResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 200
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/getLanguageResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    registerProblemResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        type:
          type: string
          example: 'SUCCESS'
        message:
          type: string
          example: 'Success'
        devMessage:
          type: string
          example: 'Success'
        success:
          type: boolean
          example: true
        data:
          type: object
          $ref: '#/components/schemas/getProblemResponseData'
      required:
        - statusCode
        - type
        - message
        - devMessage
        - success
        - data

    noContentResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 204
        type:
          type: string
          example: 'CONTENT_NOT_AVAILABLE'
        message:
          type: string
          example: 'No content available'
        devMessage:
          type: string
          example: 'No content available'
        success:
          type: boolean
          example: true
        data:
          type: array

    unauthorizedResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 401
        type:
          type: string
          example: 'UNAUTHORIZED'
        message:
          type: string
          example: 'Unauthorized'
        devMessage:
          type: string
          example: Unauthorized access. Could not proceed with the request.
        error:
          type: array
        data:
          type: array

    badRequestResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        type:
          type: string
          example: 'BAD_REQUEST'
        message:
          type: string
          example: 'Bad Request'
        devMessage:
          type: string
          example: Bad Request. Required resource does not exist.
        error:
          type: array
        data:
          type: array

    forbiddenResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 403
        type:
          type: string
          example: 'FORBIDDEN'
        message:
          type: string
          example: 'Forbidden'
        devMessage:
          type: string
          example: Forbidden access. Could not proceed with the request.
        error:
          type: array
        data:
          type: array

    notFound:
      type: object
      properties:
        statusCode:
          type: integer
          example: 404
        type:
          type: string
          example: 'NOT_FOUND'
        message:
          type: string
          example: 'Resource Not Found'
        devMessage:
          type: string
          example: Not Found. Requested resource does not exist.
        error:
          type: array
        data:
          type: array

    requestTimeout:
      type: object
      properties:
        statusCode:
          type: integer
          example: 408
        type:
          type: string
          example: 'REQUEST_TIMEOUT'
        message:
          type: string
          example: 'Request timeout.'
        devMessage:
          type: string
          example: 'Request timeout.'
        error:
          type: array
        data:
          type: array

    userAlreadyExist:
      type: object
      properties:
        statusCode:
          type: integer
          example: 409
        type:
          type: string
          example: 'CONFLICT'
        message:
          type: string
          example: 'Resource already exist'
        devMessage:
          type: string
          example: 'Resource already exist'
        error:
          type: array
        data:
          type: array

    unsupportedMedia:
      type: object
      properties:
        statusCode:
          type: integer
          example: 415
        type:
          type: string
          example: 'UNSUPPORTED_MEDIA'
        message:
          type: string
          example: 'The media format of the requested data is not supported by the server.'
        devMessage:
          type: string
          example: 'The media format of the requested data is not supported by the server.'
        error:
          type: array
        data:
          type: array

    unprocessableContent:
      type: object
      properties:
        statusCode:
          type: integer
          example: 422
        type:
          type: string
          example: 'UNPROCESSABLE_CONTENT'
        message:
          type: string
          example: 'The request was unabled to be followed due to semantic/internal errors.'
        devMessage:
          type: string
          example: 'The request was unabled to be followed due to semantic/internal errors.'
        error:
          type: array
        data:
          type: array

    internalServerErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 500
        type:
          type: string
          example: 'Internal Server Error'
        message:
          type: string
          example: 'Internal Server Error'
        devMessage:
          type: string
          example: 'Internal Server Error'
        error:
          type: array
        data:
          type: array

paths:
  /health:
    get:
      operationId: healthCheck
      summary: Service Health Check
      description: An API to check the health status of the service.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/healthCheckSuccessResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /problem/type:
    post:
      operationId: registerProblemType
      summary: Register New Problem Type
      description: An API to register new problem type in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerProblemTypePayload'
      responses:
        '201':
          description: REQUEST_COMPLETED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerProblemTypeResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAlreadyExist'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    get:
      operationId: getAllProblemType
      summary: Get all Problem Type
      description: An API to retrieve all problem types from the system.
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllProblemTypeResponse'
        '204':
          description: CONTENT_NOT_AVAILABLE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noContentResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /problem/type/{typeId}:
    get:
      operationId: getProblemTypeById
      summary: Get Problem Type by ID
      description: An API to retrieve the problem type info for requested ID.
      parameters:
        - $ref: '#/components/parameters/TypeIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProblemTypeByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    put:
      operationId: updateProblemTypeById
      summary: Update Problem Type by ID
      description: An API to update the problem description for requested ID.
      parameters:
        - $ref: '#/components/parameters/TypeIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateProblemTypePayload'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProblemTypeByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    delete:
      summary: Delete Problem Type by ID
      description: An API to delete the problem type for requested ID.
      parameters:
        - $ref: '#/components/parameters/TypeIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getProblemTypeByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /tag:
    post:
      operationId: registerTag
      summary: Register new Tag
      description: An API to register new tag in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerTagPayload'
      responses:
        '201':
          description: REQUEST_COMPLETED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerTagResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAlreadyExist'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    get:
      operationId: getAllTags
      summary: Get all Tags
      description: An API to retrieve all tags from the system.
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllTagsResponse'
        '204':
          description: CONTENT_NOT_AVAILABLE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noContentResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /tag/{tagId}:
    get:
      operationId: getTagsById
      summary: Get Tags by ID
      description: An API to retrieve the tag info for requested ID.
      parameters:
        - $ref: '#/components/parameters/TagIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTagsByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    put:
      operationId: updateTagById
      summary: Update Tag by ID
      description: An API to update the tag description for requested ID.
      parameters:
        - $ref: '#/components/parameters/TagIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateTagPayload'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTagsByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    delete:
      operationId: deleteTagById
      summary: Delete Tag by ID
      description: An API to delete the tag description for requested ID.
      parameters:
        - $ref: '#/components/parameters/TagIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTagsByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /language:
    post:
      operationId: registerSupportLanguage
      summary: Register new Support Language
      description: An API to register new support language in system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerLanguagePayload'
      responses:
        '201':
          description: REQUEST_COMPLETED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerLanguageResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAlreadyExist'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    get:
      operationId: getAllLanguages
      summary: Get all Languages
      description: An API to retrieve all languages from the system.
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllLanguagesResponse'
        '204':
          description: CONTENT_NOT_AVAILABLE
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/noContentResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /language/{langId}:
    get:
      operationId: getLanguageById
      summary: Get Language by ID
      description: An API to retrieve the language info for requested ID.
      parameters:
        - $ref: '#/components/parameters/LangIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLangByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    put:
      operationId: updateLanguageById
      summary: Update Language by ID
      description: An API to update the language details for requested ID.
      parameters:
        - $ref: '#/components/parameters/LangIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateLanguagePayload'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLangByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAlreadyExist'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

    delete:
      operationId: deleteLanguageById
      summary: Delete Language by ID
      description: An API to delete the language details for requested ID.
      parameters:
        - $ref: '#/components/parameters/LangIdParam'
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLangByIdResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'

  /problem:
    post:
      operationId: registerProblems
      summary: Register new Problems
      description: An API to register new problem in system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerProblemPayload'
      responses:
        '201':
          description: REQUEST_COMPLETED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerProblemResponse'
        '400':
          description: BAD_REQUEST
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/badRequestResponse'
        '401':
          description: UNAUTHORIZED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unauthorizedResponse'
        '403':
          description: FORBIDDEN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/forbiddenResponse'
        '404':
          description: NOT_FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notFound'
        '408':
          description: REQUEST_TIMEOUT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/requestTimeout'
        '409':
          description: CONFLICT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userAlreadyExist'
        '415':
          description: UNSUPPORTED_MEDIA
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unsupportedMedia'
        '422':
          description: UNPROCESSABLE_CONTENT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unprocessableContent'
        '500':
          description: INTERNAL_SERVER_ERROR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/internalServerErrorResponse'